(()=>{"use strict";var n={365:(n,e,r)=>{r.d(e,{A:()=>c});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([n.id,'* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\n\nform {\n    background-color: beige;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 60%;\n    min-width: 400px;\n    margin: 20px auto;\n    padding: 10px;\n}\n\n.header {\n    text-align: left;\n    font-weight: bold;\n}\n\n.row {\n    display: grid;\n    grid-template-columns: 25px 1fr .5fr .5fr 25px;\n    gap: 20px;\n}\n\ninput[type="text"],\nselect {\n    width: 100%;\n}\n\ninput[type="checkbox"] {\n    padding: 0;\n    /* Reset padding for checkboxes */\n}\n\n\n/* don\'t show the labels for the inputs*/\nlabel.visually-hidden {\n    display: none;\n}\n\nbutton.add-row {\n    width: 60%;\n    height: 35px;\n    font-size: 18px;\n    font-weight: bold;\n    margin: 10px auto\n}\n\n.control-btns {\n    width: 30%;\n    margin: 0 auto;\n    display: flex;\n    gap: 10px;\n}\n\n.control-btns>* {\n    width: 120px;\n    height: 25px;\n    font-weight: bold;\n    font-size: 16px;\n}\n\n.control-btns .calculate {\n    background-color: rgb(78, 248, 132);\n}\n\n.control-btns .reset {\n    background-color: red;\n}\n\n.screen-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n\n.screen-container>p {\n    font-size: 20px;\n    font-weight: bold;\n}\n\ndiv.screen {\n    width: 50%;\n    height: 40px;\n    background-color: #A8C3B1;\n    border: 1px solid black;\n    /* margin: auto; */\n    padding: 5px;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n@media (max-width: 1150px) {\n    .control-btns {\n        width: 40%\n    }\n}\n\n@media (max-width: 900px) {\n    form {\n        width: 80%; \n        min-width: auto; \n    }\n}\n\n@media (max-width: 600px) {\n    .control-btns {\n        width: 55%\n    }\n\n    form {\n        width: 95%; \n        min-width: auto; \n    }\n}\n\n\n@media (max-width: 450px) {\n    .control-btns {\n        display: block;\n        width: 100%;\n    }\n\n    .control-btns>*{\n        display: block;\n        width: 120px;\n        margin: 5px auto;\n    }\n\n    .screen-container {\n        flex-direction: column;\n        gap: 0;\n    }\n\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;;AAGA;IACI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,SAAS;AACb;;AAEA;;IAEI,WAAW;AACf;;AAEA;IACI,UAAU;IACV,iCAAiC;AACrC;;;AAGA,wCAAwC;AACxC;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,eAAe;IACf,iBAAiB;IACjB;AACJ;;AAEA;IACI,UAAU;IACV,cAAc;IACd,aAAa;IACb,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,yBAAyB;IACzB,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI;QACI;IACJ;AACJ;;AAEA;IACI;QACI,UAAU;QACV,eAAe;IACnB;AACJ;;AAEA;IACI;QACI;IACJ;;IAEA;QACI,UAAU;QACV,eAAe;IACnB;AACJ;;;AAGA;IACI;QACI,cAAc;QACd,WAAW;IACf;;IAEA;QACI,cAAc;QACd,YAAY;QACZ,gBAAgB;IACpB;;IAEA;QACI,sBAAsB;QACtB,MAAM;IACV;;AAEJ",sourcesContent:['* {\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n\r\nform {\r\n    background-color: beige;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    width: 60%;\r\n    min-width: 400px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n}\r\n\r\n.header {\r\n    text-align: left;\r\n    font-weight: bold;\r\n}\r\n\r\n.row {\r\n    display: grid;\r\n    grid-template-columns: 25px 1fr .5fr .5fr 25px;\r\n    gap: 20px;\r\n}\r\n\r\ninput[type="text"],\r\nselect {\r\n    width: 100%;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n    padding: 0;\r\n    /* Reset padding for checkboxes */\r\n}\r\n\r\n\r\n/* don\'t show the labels for the inputs*/\r\nlabel.visually-hidden {\r\n    display: none;\r\n}\r\n\r\nbutton.add-row {\r\n    width: 60%;\r\n    height: 35px;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin: 10px auto\r\n}\r\n\r\n.control-btns {\r\n    width: 30%;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n\r\n.control-btns>* {\r\n    width: 120px;\r\n    height: 25px;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n}\r\n\r\n.control-btns .calculate {\r\n    background-color: rgb(78, 248, 132);\r\n}\r\n\r\n.control-btns .reset {\r\n    background-color: red;\r\n}\r\n\r\n.screen-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.screen-container>p {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n}\r\n\r\ndiv.screen {\r\n    width: 50%;\r\n    height: 40px;\r\n    background-color: #A8C3B1;\r\n    border: 1px solid black;\r\n    /* margin: auto; */\r\n    padding: 5px;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n}\r\n\r\n@media (max-width: 1150px) {\r\n    .control-btns {\r\n        width: 40%\r\n    }\r\n}\r\n\r\n@media (max-width: 900px) {\r\n    form {\r\n        width: 80%; \r\n        min-width: auto; \r\n    }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    .control-btns {\r\n        width: 55%\r\n    }\r\n\r\n    form {\r\n        width: 95%; \r\n        min-width: auto; \r\n    }\r\n}\r\n\r\n\r\n@media (max-width: 450px) {\r\n    .control-btns {\r\n        display: block;\r\n        width: 100%;\r\n    }\r\n\r\n    .control-btns>*{\r\n        display: block;\r\n        width: 120px;\r\n        margin: 5px auto;\r\n    }\r\n\r\n    .screen-container {\r\n        flex-direction: column;\r\n        gap: 0;\r\n    }\r\n\r\n}'],sourceRoot:""}]);const c=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);t&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],c=0;c<n.length;c++){var A=n[c],l=t.base?A[0]+t.base:A[0],d=i[l]||0,s="".concat(l," ").concat(d);i[l]=d+1;var u=r(s),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=o(p,t);t.byIndex=c,e.splice(c,0,{identifier:s,updater:f,references:1})}a.push(s)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=r(i[a]);e[c].references--}for(var A=t(n,o),l=0;l<i.length;l++){var d=r(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=A}}},659:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0;let t=1;function o(){const n=document.querySelector("form"),e=document.createElement("div");e.classList.add("row","input"),e.innerHTML=`\n        <label class="visually-hidden" for="checkbox${t}">Check-all</label>\n        <input type="checkbox" id="checkbox${t}" name="checkbox${t}" checked>\n\n        <label for="course${t}" class="visually-hidden">Course Name:</label>\n        <input id="course${t}" name="course${t}" type="text" placeholder="Course Name">\n\n        <label for="grade${t}" class="visually-hidden">Grade</label>\n        <select id="grade${t}" name="grade${t}" required>\n            <option value="" disabled selected>Select a grade</option>\n            <option value="A+">A+</option>\n            <option value="A">A</option>\n            <option value="A-">A-</option>\n            <option value="B+">B+</option>\n            <option value="B">B</option>\n            <option value="B-">B-</option>\n            <option value="C+">C+</option>\n            <option value="C">C</option>\n            <option value="C-">C-</option>\n            <option value="D+">D+</option>\n            <option value="D">D</option>\n            <option value="F">F</option>\n        </select>\n\n        <label for="credit${t}" class="visually-hidden">Credit Amount:</label>\n        <input id="credit${t}" name="credit${t}" type="text" min="1" max="5">\n\n        <button class="delete">x</button>\n    `,e.querySelector("button.delete").addEventListener("click",(()=>{e.remove()})),n.insertBefore(e,document.querySelector(".add-row")),t++}var i=r(72),a=r.n(i),c=r(825),A=r.n(c),l=r(659),d=r.n(l),s=r(56),u=r.n(s),p=r(540),f=r.n(p),h=r(113),C=r.n(h),b=r(365),m={};m.styleTagTransform=C(),m.setAttributes=u(),m.insert=d().bind(null,"head"),m.domAPI=A(),m.insertStyleElement=f(),a()(b.A,m),b.A&&b.A.locals&&b.A.locals,o(),document.querySelector("button.add-row").addEventListener("click",o),document.querySelector(".header .check-all").addEventListener("change",(n=>{const e=document.querySelectorAll(".input.row");n.target.checked?e.forEach((n=>{n.querySelector("input[type='checkbox']").checked=!0})):e.forEach((n=>{n.querySelector("input[type='checkbox']").checked=!1}))}));const x=document.querySelector(".control-btns .calculate"),g=document.querySelector(".control-btns .reset");x.addEventListener("click",(()=>{let n=function(){let n=null;return document.querySelectorAll(".input.row").forEach((e=>{const r=e.querySelector("input[type='checkbox']").checked,t=e.querySelector("select").value,o=e.querySelector("input[name^='credit']").value;if(r&&t&&o){console.log(r),console.log(t),console.log(o);const e=function(n){switch(n){case"a+":case"a":return 4;case"a-":return 3.7;case"b+":return 3.3;case"b":return 3;case"b-":return 2.7;case"c+":return 2.3;case"c":return 2;case"c-":return 1.7;case"d+":return 1.3;case"d":return 1;case"d-":return.7;case"f":return 0}}(t.toLowerCase());n+=e*o,console.log(n)}})),n?parseFloat(n.toFixed(2)):0}();console.log(n),document.querySelector("div.screen").textContent=n})),g.addEventListener("click",(function(){document.querySelectorAll(".input.row").forEach((n=>{n.querySelector("input[type='checkbox']").checked&&(n.querySelector("select").value="",n.querySelector("input[name^='credit']").value="")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,